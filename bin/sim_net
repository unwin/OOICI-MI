#!/usr/bin/python
import sys as sys
import os as os
import commands as c
import re as re

rules_set = {}

def read_config( ):
  try:
    with open('/tmp/sim_net', 'r') as f:
      for line in f:
        (host, rule) = line.rstrip('\n').split('|')
        rules_set[host] = rule
  except (IOError):
    print "ERROR"
    pass

def execute_commands( commands ):
  rules = ""
  print "Enter sudo password (needed to run ipfw commands)"
  for item in commands:
    print 'COMMAND: ' + item
    output = c.getoutput(item)
    if " add " in item:
      rules = rules + ' ' + re.split('(\S+)', output)[1]
    print 'OUTPUT: ' + output
  return rules

def turn_off_rules( ip ):
    commands = ['sudo ipfw list',
                'sudo ipfw delete ' + rules_set[ip],
                'sudo ipfw list',
               ]
    for item in commands:
      print 'COMMAND: ' + item
      output = c.getoutput(item)
      print 'OUTPUT: ' + output
    del rules_set[ip]


if len(sys.argv) < 3:
  print "Usage is " + sys.argv[0] + "<off|sat_calm|sat_rough|...> target_ip"
else:
  conditions = sys.argv[1]
  ip = sys.argv[2]

  read_config()
  
  #######################
  if conditions == "off":
  #######################

    turn_off_rules( ip )

  ##############################
  elif conditions == "sat_calm":
  ##############################

    """
    Calm state: latencies fluctuate randomly between 1200ms and 1300ms, 
                jitter is 30-60ms, packet loss is 1%, bandwidth is 
                between 150 and 250kbps

    Note: currently only configuring one direction of the connection
    """

    commands = ['sudo ipfw add pipe 1 ip from any to ' + ip,
                'sudo ipfw pipe 1 config bw 150Kbit/s queue 90 delay 1200ms plr 0.01',
        
                'sudo ipfw add prob 0.40 pipe 2 ip from any to ' + ip,
                'sudo ipfw pipe 2 config bw 160Kbit/s queue 90 delay 10ms',

                'sudo ipfw add prob 0.40 pipe 3 ip from any to ' + ip,
                'sudo ipfw pipe 3 config bw 170Kbit/s queue 90 delay 10ms',
                
                'sudo ipfw add prob 0.40 pipe 4 ip from any to ' + ip,
                'sudo ipfw pipe 4 config bw 180Kbit/s queue 90 delay 10ms',

                'sudo ipfw add prob 0.40 pipe 5 ip from any to ' + ip,
                'sudo ipfw pipe 5 config bw 190Kbit/s queue 90 delay 10ms',

                'sudo ipfw add prob 0.40 pipe 6 ip from any to ' + ip,
                'sudo ipfw pipe 6 config bw 200Kbit/s queue 90 delay 10ms',

                'sudo ipfw add prob 0.40 pipe 7 ip from any to ' + ip,
                'sudo ipfw pipe 7 config bw 210Kbit/s queue 90 delay 10ms',

                'sudo ipfw add prob 0.40 pipe 8 ip from any to ' + ip,
                'sudo ipfw pipe 8 config bw 220Kbit/s queue 90 delay 10ms',

                'sudo ipfw add prob 0.40 pipe 9 ip from any to ' + ip,
                'sudo ipfw pipe 9 config bw 230Kbit/s queue 90 delay 10ms',

                'sudo ipfw add prob 0.40 pipe 10 ip from any to ' + ip,
                'sudo ipfw pipe 10 config bw 250Kbit/s queue 90 delay 10ms',

                'sudo ipfw list',
               ]

    rules = execute_commands( commands )
    if ip in rules_set:
      rules_set[ip] += rules
    else:
      rules_set[ip] = rules

  ###############################
  elif conditions == "sat_rough":
  ###############################

    """
    Rough state: latencies fluctuate randomly between 1800 and 4000ms, 
                 jitter is 60-120ms, packet loss is 25%, bandwidth is 
                 between 64 and 150kbps, random complete loss for 20 
                 seconds once every 1-3 minutes
  
    Note: currently only configuring one direction of the connection
    """

    commands = ['sudo ipfw add pipe 1 ip from any to ' + ip,
                'sudo ipfw pipe 1 config bw 64Kbit/s queue 90 delay 1800ms plr 0.25',

                'sudo ipfw add prob 0.40 pipe 2 ip from any to ' + ip,
                'sudo ipfw pipe 2 config bw 64Kbit/s queue 90 delay 320ms',

                'sudo ipfw add prob 0.40 pipe 3 ip from any to ' + ip,
                'sudo ipfw pipe 3 config bw 64Kbit/s queue 90 delay 320ms',

                'sudo ipfw add prob 0.40 pipe 4 ip from any to ' + ip,
                'sudo ipfw pipe 4 config bw 64Kbit/s queue 90 delay 320ms',

                'sudo ipfw add prob 0.40 pipe 5 ip from any to ' + ip,
                'sudo ipfw pipe 5 config bw 64Kbit/s queue 90 delay 320ms',

                'sudo ipfw add prob 0.40 pipe 6 ip from any to ' + ip,
                'sudo ipfw pipe 6 config bw 64Kbit/s queue 90 delay 320ms',

                'sudo ipfw add prob 0.40 pipe 7 ip from any to ' + ip,
                'sudo ipfw pipe 7 config bw 64Kbit/s queue 90 delay 320ms',

                'sudo ipfw add prob 0.40 pipe 8 ip from any to ' + ip,
                'sudo ipfw pipe 8 config bw 64Kbit/s queue 90 delay 320ms',

                'sudo ipfw add prob 0.40 pipe 9 ip from any to ' + ip,
                'sudo ipfw pipe 9 config bw 64Kbit/s queue 90 delay 320ms',

                'sudo ipfw add prob 0.40 pipe 10 ip from any to ' + ip,
                'sudo ipfw pipe 10 config bw 64Kbit/s queue 90 delay 320ms',

                'sudo ipfw list',
               ]

    rules = execute_commands( commands )
    if ip in rules_set:
      rules_set[ip] += rules
    else:
      rules_set[ip] = rules
     
  ###############################
  # save state to a config file #
  ###############################

  if len(rules_set) > 0:
    with open('/tmp/sim_net', 'w') as f:
      for host in rules_set:
        f.write(host + '|' + rules_set[host] + '\n')
  else:
    print "trying to unlink"
    os.unlink('/tmp/sim_net')

